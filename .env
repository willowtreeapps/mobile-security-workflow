# .env

# // VULNERABILITIES //
# - Insecure logging
INSECURE_LOGGING_RULE_ID=android/insecure-logging
INSECURE_LOGGING_PRECISION=high
INSECURE_LOGGING_NAME=Insecure Logging
INSECURE_LOGGING_SEV=7.5
INSECURE_LOGGING_CWE=external/cwe/cwe-346
INSECURE_LOGGING_REMEDIATION="### Recommendation\nAvoid logging sensitive information such as credentials, tokens, or personal user data. Use `Log.isLoggable()` to control logging levels in production builds.\n\n### Example (Vulnerable Code)\n```java\nLog.d(\"DEBUG\", \"User password: \" + password);\n```\n\n### Fixed Code\n```java\nif (Log.isLoggable(\"DEBUG\", Log.DEBUG)) {\n    Log.d(\"DEBUG\", \"User attempted login\");\n}\n```\n\n### References\n- [Android Developers: Log](https://developer.android.com/reference/android/util/Log)\n- [OWASP Mobile Top 10: Insecure Logging](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures)\n\n### Evidence\n"
# - Root Detection
ROOT_DETECTION_RULE_ID=android/root-detection
ROOT_DETECTION_PRECISION=high
ROOT_DETECTION_NAME=Lack of Root Detection
ROOT_DETECTION_SEV=8.0
ROOT_DETECTION_CWE=external/cwe/cwe-937
ROOT_DETECTION_REMEDIATION="### Recommendation\n Implement root detection mechanisms to prevent execution on rooted devices. Check for Cydia, SuperSU, Magisk, Xposed, etc. \n\n### Fixed Code\n```java\npublic boolean isDeviceRooted() {\n    String[] paths = {\"/sbin/su\",\"/system/bin/su\",\"/system/xbin/su\",\"/data/local/xbin/su\",\"/data/local/bin/su\",\"/system/sd/xbin/su\",\"/system/bin/failsafe/su\",\"/data/local/su\",\"/su/bin/su\"};\n    for(String path:paths) {\n        if (new File(path).exists()) {\n            return true;\n        }\n }\n return false;\n}\n```\n\n### References\n- [MASWE-0097](https://mas.owasp.org/MASWE/MASVS-RESILIENCE/MASWE-0097)\n\n### Evidence\n"
# - Emulator Detection 
EMULATOR_DETECTION_RULE_ID=android/emulator-detection
EMULATOR_DETECTION_PRECISION=high
EMULATOR_DETECTION_NAME=Lack of Emulator Detection
EMULATOR_DETECTION_SEV=7.5
EMULATOR_DETECTION_CWE=external/cwe/cwe-940
EMULATOR_DETECTION_REMEDIATION="### Recommendation\n The application fails to detect if it is running in an emulated environment, allowing attackers to analyze and manipulate its behavior in a controlled setting. This can lead to reverse engineering, data manipulation, and exploitation of vulnerabilities. \n\n### Fixed Code\n```java\npublic boolean isEmulator() {\n    String[] knownEmulatorDevices = {\"generic\", \"unknown\", \"google_sdk\", \"Emulator\", \"Android SDK built for x86\"};\n    for (String device : knownEmulatorDevices) {\n        if (Build.MODEL.contains(device) || Build.MANUFACTURER.contains(device)) {\n            return true;\n        }\n    }\n    return (Build.BRAND.startsWith(\"generic\") && Build.DEVICE.startsWith(\"generic\")) || \"google_sdk\".equals(Build.PRODUCT);\n}\n```\n\n### References\n- [MASWE-0099](https://mas.owasp.org/MASWE/MASVS-RESILIENCE/MASWE-0099)\n\n### Evidence\n"
# - Insecure Storage in Shared Preferences  
INSECURE_STORAGE_SP_RULE_ID=android/insecure-storage-shared-prefs  
INSECURE_STORAGE_SP_PRECISION=high  
INSECURE_STORAGE_SP_NAME=Insecure Storage in Shared Preferences  
INSECURE_STORAGE_SP_SEV=8.0  
INSECURE_STORAGE_SP_CWE=external/cwe/cwe-312  
INSECURE_STORAGE_SP_REMEDIATION="### Recommendation\n The application stores sensitive data in SharedPreferences without encryption, making it accessible to attackers through root access or backup extraction. Avoid storing sensitive information in SharedPreferences or encrypt it using Android's EncryptedSharedPreferences API.\n\n### Vulnerable Code\n```java\n// Storing sensitive data in SharedPreferences without encryption\nSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\nSharedPreferences.Editor editor = prefs.edit();\neditor.putString(\"user_token\", \"sensitive_data\"); // Plaintext storage\neditor.apply();\n```\n\n### Fixed Code\n```java\n// Encrypting data before storing in SharedPreferences\nSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\nSharedPreferences.Editor editor = prefs.edit();\neditor.putString(\"user_token\", encryptData(\"sensitive_data\"));\neditor.apply();\n\nprivate String encryptData(String data) {\n    try {\n        Key key = new SecretKeySpec(\"your-secret-key\".getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return Base64.encodeToString(cipher.doFinal(data.getBytes()), Base64.DEFAULT);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```\n\n### References\n- [MASWE-0007](https://mas.owasp.org/MASWE/MASVS-STORAGE/MASWE-0007)\n- [CODEQL - Shared Preferences](https://codeql.github.com/codeql-query-help/java/java-android-cleartext-storage-shared-prefs)\n\n### Evidence\n"
# - Insecure Storage - SQLITE
INSECURE_STORAGE_SQLITE_RULE_ID=android/insecure-storage-sqlite  
INSECURE_STORAGE_SQLITE_PRECISION=high  
INSECURE_STORAGE_SQLITE_NAME=Insecure Storage in SQLite
INSECURE_STORAGE_SQLITE_SEV=8.0  
INSECURE_STORAGE_SQLITE_CWE=external/cwe/cwe-312  
INSECURE_STORAGE_SQLITE_REMEDIATION="### Recommendation\n The application stores sensitive data in an SQLite database without encryption, making it accessible to attackers through root access or data extraction. Avoid storing sensitive information in plaintext or encrypt it using SQLCipher.\n\n### Vulnerable Code\n```java\n// Storing sensitive data in SQLite without encryption\nSQLiteDatabase db = openOrCreateDatabase(\"users.db\", MODE_PRIVATE, null);\ndb.execSQL(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)\");\ndb.execSQL(\"INSERT INTO users (username, password) VALUES ('admin', 'supersecretpassword')\"); // Plaintext storage\n```\n\n### Fixed Code\n```java\n// Using SQLCipher to encrypt SQLite database\npublic class SecureDBHelper extends net.sqlcipher.database.SQLiteOpenHelper {\n    private static final String DATABASE_NAME = \"secure_users.db\";\n    private static final int DATABASE_VERSION = 1;\n\n    public SecureDBHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    @Override\n    public void onCreate(net.sqlcipher.database.SQLiteDatabase db) {\n        db.execSQL(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)\");\n    }\n\n    public void insertUser(String username, String password, String passphrase) {\n        ContentValues values = new ContentValues();\n        values.put(\"username\", username);\n        values.put(\"password\", hashPassword(password));\n        try (net.sqlcipher.database.SQLiteDatabase db = getWritableDatabase(passphrase)) {\n            db.insert(\"users\", null, values);\n        }\n    }\n\n    private String hashPassword(String password) {\n        return BCrypt.hashpw(password, BCrypt.gensalt(12));\n    }\n}\n```\n\n### References\n- [SQLCipher for Android](https://www.zetetic.net/sqlcipher/sqlcipher-for-android/)\n- [OWASP Mobile Security](https://owasp.org/www-project-mobile-security-testing-guide/)\n\n### Evidence\n"

# - MOCK DATA / TEST DATA
MOCK_USER_NAME=user321@outlook.com
MOCK_PASSWORD=password123

# - Proxy Config
PROXY_PORT=8082
PROXY_HOST=10.0.3.2 # - The default IP to point to host machine through Genymotion